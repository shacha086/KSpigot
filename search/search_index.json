{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KSpigot \u00b6 KSpigot extends Paper (and all of its forks) with additional functionality. This reaches from small extension functions, to features making use of Kotlin's language features and finally to bigger APIs (e.g. the GUI API). KSpigot is at home on GitHub . Feel free to contribute to the project. Setup \u00b6 In order to get started, follow the setup guide . Contribute to this documentation \u00b6 Contributions to the documentation are welcome, as it is written by the community itself. Create a fork of KSpigot and add new markdown files to guide/docs/ , commit and push the changes and then create a pull request to the main project.","title":"Home"},{"location":"#kspigot","text":"KSpigot extends Paper (and all of its forks) with additional functionality. This reaches from small extension functions, to features making use of Kotlin's language features and finally to bigger APIs (e.g. the GUI API). KSpigot is at home on GitHub . Feel free to contribute to the project.","title":"KSpigot"},{"location":"#setup","text":"In order to get started, follow the setup guide .","title":"Setup"},{"location":"#contribute-to-this-documentation","text":"Contributions to the documentation are welcome, as it is written by the community itself. Create a fork of KSpigot and add new markdown files to guide/docs/ , commit and push the changes and then create a pull request to the main project.","title":"Contribute to this documentation"},{"location":"commands/brigardier/","text":"Brigardier support \u00b6 Brigardier dependency for spigot-api users (You do only have to do the following if you are using the spigot-api instead of the spigot dependency!) Whilst Spigot itself depends on Brigardier the Spigot API doesn't so in order for this feature to work you need to add Brigardier as a compileOnly dependency. More information on that can be found here: https://github.com/Mojang/brigadier#gradle Create a command \u00b6 command ( \"mycommand\" ) { // the command body } Register the command \u00b6 The command will be automatically registered by default, if you are initializing it before the end of the startup call to your plugin. Otherwise, you can register it manually using the command.register() function (where command is the command instance which the command(name) function returns). Command features \u00b6 Where to call these? How to structure these? All the following features can be used inside the command body. You can infinitely nest all these functions, resulting in complex command structures. Execution handler \u00b6 You provide your execution logic using the executes (with status code) or simpleExecutes (status code is always 1) function. simpleExecutes { context -> context . source . bukkitSender . sendMessage ( \"hey gamer ;)\" ) } Info The execution and suggestion providers always do only apply to the location in the tree where they are defined. The command context \u00b6 You can use the command context to get the command source. You can use the source for: source.bukkitSender to get the CommandSender source.player ensure that a player executed the command and get that Player source.bukkitWorld to get the world of the executor Literals (subcommands) \u00b6 literal ( \"mysubcommand\" ) { // the command body for this part of the command tree } Arguments \u00b6 argument ( \"argumentname\" , StringArgumentType . string ()) { // the command body (inside this body, the argument exists in the context) } The argument name will be displayed to the player. Also, it can be used to retrieve the value of the argument the execution handler. Argument type \u00b6 The second paramter of the argument function is the argument type. There are a lot of pre defined argument types by brigardier. The argument types for all primitives can be accessed in the following pattern: NameArgumentType.name() (where name is the name of the primitive) // examples: StringArgumentType . string () BoolArgumentType . bool () IntegerArgumentType . integer () Retrieve the value of an argument \u00b6 The value of the argument can be retrieved from the command context. argument ( \"argumentname\" , StringArgumentType . string ()) { simpleExecutes { val argValue = it . getArgument < String > ( \"argumentname\" ) // or using reified you can omit the type sometimes mapWhereTheKeysAreStrings [ it . getArgument ( \"argumentname\" ) ] } } Suggestions \u00b6 You can provide argument suggestions using the simpleSuggests function. It is not recommended using the default suggests function. simpleSuggests { Material . values (). toList () } It is okay to do heavy operations inside this function. Suggestions are asynchronous. The body of the simpleSuggests function is suspending, meaning you can use kotlinx.coroutines in it.","title":"Brigardier"},{"location":"commands/brigardier/#brigardier-support","text":"Brigardier dependency for spigot-api users (You do only have to do the following if you are using the spigot-api instead of the spigot dependency!) Whilst Spigot itself depends on Brigardier the Spigot API doesn't so in order for this feature to work you need to add Brigardier as a compileOnly dependency. More information on that can be found here: https://github.com/Mojang/brigadier#gradle","title":"Brigardier support"},{"location":"commands/brigardier/#create-a-command","text":"command ( \"mycommand\" ) { // the command body }","title":"Create a command"},{"location":"commands/brigardier/#register-the-command","text":"The command will be automatically registered by default, if you are initializing it before the end of the startup call to your plugin. Otherwise, you can register it manually using the command.register() function (where command is the command instance which the command(name) function returns).","title":"Register the command"},{"location":"commands/brigardier/#command-features","text":"Where to call these? How to structure these? All the following features can be used inside the command body. You can infinitely nest all these functions, resulting in complex command structures.","title":"Command features"},{"location":"commands/brigardier/#execution-handler","text":"You provide your execution logic using the executes (with status code) or simpleExecutes (status code is always 1) function. simpleExecutes { context -> context . source . bukkitSender . sendMessage ( \"hey gamer ;)\" ) } Info The execution and suggestion providers always do only apply to the location in the tree where they are defined.","title":"Execution handler"},{"location":"commands/brigardier/#the-command-context","text":"You can use the command context to get the command source. You can use the source for: source.bukkitSender to get the CommandSender source.player ensure that a player executed the command and get that Player source.bukkitWorld to get the world of the executor","title":"The command context"},{"location":"commands/brigardier/#literals-subcommands","text":"literal ( \"mysubcommand\" ) { // the command body for this part of the command tree }","title":"Literals (subcommands)"},{"location":"commands/brigardier/#arguments","text":"argument ( \"argumentname\" , StringArgumentType . string ()) { // the command body (inside this body, the argument exists in the context) } The argument name will be displayed to the player. Also, it can be used to retrieve the value of the argument the execution handler.","title":"Arguments"},{"location":"commands/brigardier/#argument-type","text":"The second paramter of the argument function is the argument type. There are a lot of pre defined argument types by brigardier. The argument types for all primitives can be accessed in the following pattern: NameArgumentType.name() (where name is the name of the primitive) // examples: StringArgumentType . string () BoolArgumentType . bool () IntegerArgumentType . integer ()","title":"Argument type"},{"location":"commands/brigardier/#retrieve-the-value-of-an-argument","text":"The value of the argument can be retrieved from the command context. argument ( \"argumentname\" , StringArgumentType . string ()) { simpleExecutes { val argValue = it . getArgument < String > ( \"argumentname\" ) // or using reified you can omit the type sometimes mapWhereTheKeysAreStrings [ it . getArgument ( \"argumentname\" ) ] } }","title":"Retrieve the value of an argument"},{"location":"commands/brigardier/#suggestions","text":"You can provide argument suggestions using the simpleSuggests function. It is not recommended using the default suggests function. simpleSuggests { Material . values (). toList () } It is okay to do heavy operations inside this function. Suggestions are asynchronous. The body of the simpleSuggests function is suspending, meaning you can use kotlinx.coroutines in it.","title":"Suggestions"},{"location":"commands/brigardier_example/","text":"The following command illustrates how to use commands, subcommands, arguments and the command context. command ( \"gaming\" ) { literal ( \"set\" ) { argument ( \"state\" , BoolArgumentType . bool ()) { simpleSuggests { listOf ( true , false ) } simpleExecutes { if ( it . getArgument ( \"state\" )) it . source . bukkitSender . sendMessage ( \"yoo gaming has been activated\" ) else { it . source . player . kill () it . source . player . sendText ( \"gaming disabled\" ) { color = KColors . INDIANRED } } } } } }","title":"Brigardier example"},{"location":"extensions/itembuilder/","text":"Create an ItemStack \u00b6 The default way of building complex ItemStack s using just Spigot is often painful to use and confusing for beginners. With KSpigot's item builder you have an easy to use builder DSL. Additionally, it provides an easy way to update the ItemMeta of an ItemStack , which is often needed. Example use of the item builder \u00b6 val sword = itemStack ( Material . GOLDEN_SWORD ) { amount = 3 addEnchantment ( Enchantment . KNOCKBACK , 2 ) meta { name = literalText ( \"Magic Sword\" ) { color = KColors . GOLD } isUnbreakable = true addLore { + \"This sword is truly special.\" + \"Try it!\" } customModel = 1001 flag ( ItemFlag . HIDE_UNBREAKABLE ) } } This creates the following item \u00b6","title":"Item builder"},{"location":"extensions/itembuilder/#create-an-itemstack","text":"The default way of building complex ItemStack s using just Spigot is often painful to use and confusing for beginners. With KSpigot's item builder you have an easy to use builder DSL. Additionally, it provides an easy way to update the ItemMeta of an ItemStack , which is often needed.","title":"Create an ItemStack"},{"location":"extensions/itembuilder/#example-use-of-the-item-builder","text":"val sword = itemStack ( Material . GOLDEN_SWORD ) { amount = 3 addEnchantment ( Enchantment . KNOCKBACK , 2 ) meta { name = literalText ( \"Magic Sword\" ) { color = KColors . GOLD } isUnbreakable = true addLore { + \"This sword is truly special.\" + \"Try it!\" } customModel = 1001 flag ( ItemFlag . HIDE_UNBREAKABLE ) } }","title":"Example use of the item builder"},{"location":"extensions/itembuilder/#this-creates-the-following-item","text":"","title":"This creates the following item"},{"location":"extensions/listener/","text":"Register an event listener \u00b6 Using the listen function \u00b6 You can register an event listener by calling the following function anywhere you want. listen < EventClass > { doSomething () } The event instance will be passed in as it , but you can change this: listen < PlayerMoveEvent > { moveEvent -> moveEvent . player . kick ( literalText ( \"Do not move!\" )) broadcast ( \" ${ moveEvent . player } moved :/\" ) } The listen function returns the Listener instance, which allows you to perform operations on it later. For example you could listen to a specific event temporarily: val moveEventListener = listen < PlayerMoveEvent > { it . player . kick ( literalText ( \"Do not move!\" )) } // e.g. unregister the listener after some time taskRunLater ( 20 * 5 ) { moveEventListener . unregister () } Register an existing Listener instance \u00b6 There is an extension function which registers a Listener instance: listenerInstance . register () Unregister a Listener \u00b6 Just call listenerInstance.unregister()","title":"Event listener"},{"location":"extensions/listener/#register-an-event-listener","text":"","title":"Register an event listener"},{"location":"extensions/listener/#using-the-listen-function","text":"You can register an event listener by calling the following function anywhere you want. listen < EventClass > { doSomething () } The event instance will be passed in as it , but you can change this: listen < PlayerMoveEvent > { moveEvent -> moveEvent . player . kick ( literalText ( \"Do not move!\" )) broadcast ( \" ${ moveEvent . player } moved :/\" ) } The listen function returns the Listener instance, which allows you to perform operations on it later. For example you could listen to a specific event temporarily: val moveEventListener = listen < PlayerMoveEvent > { it . player . kick ( literalText ( \"Do not move!\" )) } // e.g. unregister the listener after some time taskRunLater ( 20 * 5 ) { moveEventListener . unregister () }","title":"Using the listen function"},{"location":"extensions/listener/#register-an-existing-listener-instance","text":"There is an extension function which registers a Listener instance: listenerInstance . register ()","title":"Register an existing Listener instance"},{"location":"extensions/listener/#unregister-a-listener","text":"Just call listenerInstance.unregister()","title":"Unregister a Listener"},{"location":"extensions/literal_text/","text":"Literal text API \u00b6 Create a text object \u00b6 val text = literalText ( \"base text\" ) { // the text builder } // or val text = literalText { // the text builder } Add children text objects \u00b6 literalText ( \"base text\" ) { text ( \"children text\" ) { // children text builder } } Format the text \u00b6 Text formatting: literalText ( \"base text\" ) { bold = true italic = true underline = true strikethrough = true obfuscate = true } Color: literalText ( \"base text\" ) { color = TextColor . color ( 255 , 116 , 99 ) color = KColors . INDIANRED } Events \u00b6 Hover event \u00b6 General hover event \u00b6 literalText ( \"base text\" ) { hoverEvent = HoverEvent . hoverEvent ( action , value ) } Show hover text \u00b6 literalText ( \"base text\" ) { hoverText ( \"you hovered me\" ) { // hover text builder } } Show hover Item \u00b6 literalText ( \"base text\" ) { hoverItem ( item ) } Show hover Entity \u00b6 literalText ( \"base text\" ) { hoverEntity ( entity ) } Click event \u00b6 General click event \u00b6 literalText ( \"base text\" ) { clickEvent = ClickEvent . clickEvent ( action , value ) } Execute command \u00b6 literalText ( \"base text\" ) { onClickCommand ( \"/me hoho\" , onlySuggest = true ) } Copy a String \u00b6 literalText ( \"base text\" ) { onClickCopy ( \"https://github.com/bluefireoly/KSpigot\" ) } Open a URL \u00b6 literalText ( \"base text\" ) { onClickOpenURL ( \"https://github.com/bluefireoly/KSpigot\" ) } Special \u00b6 literalText ( \"base text\" ) { // line break newLine () // an empty line (two line breaks) emptyLine () } Add paper components \u00b6 literalText ( \"base text\" ) { // e.g. add a TranslatableComponent component ( Component . translatable ( \"translation.key\" )) { // optional text body } } Add legacy chat components \u00b6 You can add legacy text if you want to use the old color codes for some reason. literalText ( \"base text\" ) { legacyText ( \"\u00a7cthis text is red\" ) { // optional text body to format the legacy text } }","title":"Literal text"},{"location":"extensions/literal_text/#literal-text-api","text":"","title":"Literal text API"},{"location":"extensions/literal_text/#create-a-text-object","text":"val text = literalText ( \"base text\" ) { // the text builder } // or val text = literalText { // the text builder }","title":"Create a text object"},{"location":"extensions/literal_text/#add-children-text-objects","text":"literalText ( \"base text\" ) { text ( \"children text\" ) { // children text builder } }","title":"Add children text objects"},{"location":"extensions/literal_text/#format-the-text","text":"Text formatting: literalText ( \"base text\" ) { bold = true italic = true underline = true strikethrough = true obfuscate = true } Color: literalText ( \"base text\" ) { color = TextColor . color ( 255 , 116 , 99 ) color = KColors . INDIANRED }","title":"Format the text"},{"location":"extensions/literal_text/#events","text":"","title":"Events"},{"location":"extensions/literal_text/#hover-event","text":"","title":"Hover event"},{"location":"extensions/literal_text/#general-hover-event","text":"literalText ( \"base text\" ) { hoverEvent = HoverEvent . hoverEvent ( action , value ) }","title":"General hover event"},{"location":"extensions/literal_text/#show-hover-text","text":"literalText ( \"base text\" ) { hoverText ( \"you hovered me\" ) { // hover text builder } }","title":"Show hover text"},{"location":"extensions/literal_text/#show-hover-item","text":"literalText ( \"base text\" ) { hoverItem ( item ) }","title":"Show hover Item"},{"location":"extensions/literal_text/#show-hover-entity","text":"literalText ( \"base text\" ) { hoverEntity ( entity ) }","title":"Show hover Entity"},{"location":"extensions/literal_text/#click-event","text":"","title":"Click event"},{"location":"extensions/literal_text/#general-click-event","text":"literalText ( \"base text\" ) { clickEvent = ClickEvent . clickEvent ( action , value ) }","title":"General click event"},{"location":"extensions/literal_text/#execute-command","text":"literalText ( \"base text\" ) { onClickCommand ( \"/me hoho\" , onlySuggest = true ) }","title":"Execute command"},{"location":"extensions/literal_text/#copy-a-string","text":"literalText ( \"base text\" ) { onClickCopy ( \"https://github.com/bluefireoly/KSpigot\" ) }","title":"Copy a String"},{"location":"extensions/literal_text/#open-a-url","text":"literalText ( \"base text\" ) { onClickOpenURL ( \"https://github.com/bluefireoly/KSpigot\" ) }","title":"Open a URL"},{"location":"extensions/literal_text/#special","text":"literalText ( \"base text\" ) { // line break newLine () // an empty line (two line breaks) emptyLine () }","title":"Special"},{"location":"extensions/literal_text/#add-paper-components","text":"literalText ( \"base text\" ) { // e.g. add a TranslatableComponent component ( Component . translatable ( \"translation.key\" )) { // optional text body } }","title":"Add paper components"},{"location":"extensions/literal_text/#add-legacy-chat-components","text":"You can add legacy text if you want to use the old color codes for some reason. literalText ( \"base text\" ) { legacyText ( \"\u00a7cthis text is red\" ) { // optional text body to format the legacy text } }","title":"Add legacy chat components"},{"location":"extensions/tasks/","text":"The general task function \u00b6 The task function is very powerful. It connects almost all kinds of Spigot tasks and even adds additional features on top. You define its behaviour by providing the following parameters (all are optional and have default values): Parameter Description sync if the runnable should run sync (true) or async (false) delay the delay (in ticks) until the first execution of the task period at which interval (in ticks) the task should be repeated howOften how many times the task should be executed - null for infinite execution endCallback code that should always be executed when the runnable ends safe if the endCallback of the runnable should always be executed, even if the server shuts down or the runnable ends prematurely runnable the runnable which should be executed each repetition The body of task function is the runnable parameter. This runnable provides an instance of KSpigotRunnable , which inherits from BukkitRunnable , but adds counters on top. These counters are: counterUp counterDownToOne counterDownToZero An example would be: task ( sync = false , delay = 25 , period = 20 , howOften = 5 ) { println ( it . counterUp ) // starting from zero println ( it . counterDownToOne ) // starting from howOften println ( it . counterDownToZero ) // starting from howOften - 1 } Switch between synchronous and asynchronous execution \u00b6 You can simply use the sync and async function. sync { println ( \"now sync\" ) async { println ( \"now async\" ) sync { println ( \"now sync again\" ) } } } Alternatively, if you want to specify wether a task should be executed sync or async using a parameter, you can use the taskRun function, which has a sync parameter. Other (simpler) task functions \u00b6 Run a task later \u00b6 You can use taskRunLater . This function executes the given runnable with the given delay . Either sync or async (specified by the sync parameter).","title":"Tasks"},{"location":"extensions/tasks/#the-general-task-function","text":"The task function is very powerful. It connects almost all kinds of Spigot tasks and even adds additional features on top. You define its behaviour by providing the following parameters (all are optional and have default values): Parameter Description sync if the runnable should run sync (true) or async (false) delay the delay (in ticks) until the first execution of the task period at which interval (in ticks) the task should be repeated howOften how many times the task should be executed - null for infinite execution endCallback code that should always be executed when the runnable ends safe if the endCallback of the runnable should always be executed, even if the server shuts down or the runnable ends prematurely runnable the runnable which should be executed each repetition The body of task function is the runnable parameter. This runnable provides an instance of KSpigotRunnable , which inherits from BukkitRunnable , but adds counters on top. These counters are: counterUp counterDownToOne counterDownToZero An example would be: task ( sync = false , delay = 25 , period = 20 , howOften = 5 ) { println ( it . counterUp ) // starting from zero println ( it . counterDownToOne ) // starting from howOften println ( it . counterDownToZero ) // starting from howOften - 1 }","title":"The general task function"},{"location":"extensions/tasks/#switch-between-synchronous-and-asynchronous-execution","text":"You can simply use the sync and async function. sync { println ( \"now sync\" ) async { println ( \"now async\" ) sync { println ( \"now sync again\" ) } } } Alternatively, if you want to specify wether a task should be executed sync or async using a parameter, you can use the taskRun function, which has a sync parameter.","title":"Switch between synchronous and asynchronous execution"},{"location":"extensions/tasks/#other-simpler-task-functions","text":"","title":"Other (simpler) task functions"},{"location":"extensions/tasks/#run-a-task-later","text":"You can use taskRunLater . This function executes the given runnable with the given delay . Either sync or async (specified by the sync parameter).","title":"Run a task later"},{"location":"gui/compounds/","text":"Create a new compound \u00b6 In this example, let's create a simple gui which lists all existing materials. Also, we want to send a chat message with the name of the material when the user clicks on the icon. You can create a compound inside a page builder scope. The recommended way of doing so is to use the createRectCompound function. page ( 1 ) { val compound = createRectCompound < Material > ( Slots . RowOneSlotOne , Slots . RowSixSlotEight , iconGenerator = { ItemStack ( it ) }, onClick = { clickEvent , element -> clickEvent . player . sendMessage ( \"You clicked on: ${ element . name } \" ) } ) } Notice that the generic type of the compound is Material . The compound type defines the type of the elements which can be added to the compound. The iconGenerator defines how each compound element should be displayed. You will get the element passed as it and you have to return an ItemStack , which will be used for the icon. Info In our example, it is very easy to create the icon, as we can easily create an ItemStack from a Material . In your scenarios, don't be scared of putting more complex logic inside the iconGenerator . Modify the content of a compound \u00b6 The compound from above will be empty at first, you have to add content to it. This can be done using the compound.addContent function. The content you add has to be of the type you defined earlier (in our case this is Material ). compound . addContent ( Material . values (). toList ()) In order to remove content, call the compound.removeContent function. Let's remove air from our example compound. compound . removeContent ( Material . AIR ) Sort the compound \u00b6 You can use the compound.sortContentBy function to define in which order the elements of a compound should be displayed. In our example, we could sort by the name of the material like this: compound . sortContentBy { it . name } Add scroll buttons \u00b6 If the content of the compound won't fit on one page of the GUI, do not create multiple pages, even if this is what you might think of at first. Instead, add scroll buttons to the same page! Smooth scrolling \u00b6 To implement smooth scrolling, create scroll buttons like this: compoundScroll ( Slots . RowOneSlotNine , ItemStack ( Material . PAPER ), compound , scrollTimes = 6 ) compoundScroll ( Slots . RowSixSlotNine , ItemStack ( Material . PAPER ), compound , scrollTimes = 6 , reverse = true ) Notice that you have to pass the compound as a parameter. Also, be careful to set scrollTimes to the height of your compound (in our example this is 6, because the inventory is 6 slots high, and we use the full height). You can use the reverse parameter and set it to true to create a button that scrolls backwards. Instant (hard) scrolling \u00b6 Instant (or hard) scrolling means that no scrolling animation will be displayed. To implement instant scrolling, leave scrollTimes at its default value (1) and instead modify the scrollLines parameter. Set scrollLines to the amount of lines you want to instantly scroll by pressing the button. If you want to scroll \"page by page\", set scrollLines to the height of the compound. In our example, we could create the following button to scroll \"page by page\" instantly (without any scrolling animation): compoundScroll ( Slots . RowSixSlotNine , ItemStack ( Material . PAPER ), compound , scrollLines = 6 )","title":"Compounds"},{"location":"gui/compounds/#create-a-new-compound","text":"In this example, let's create a simple gui which lists all existing materials. Also, we want to send a chat message with the name of the material when the user clicks on the icon. You can create a compound inside a page builder scope. The recommended way of doing so is to use the createRectCompound function. page ( 1 ) { val compound = createRectCompound < Material > ( Slots . RowOneSlotOne , Slots . RowSixSlotEight , iconGenerator = { ItemStack ( it ) }, onClick = { clickEvent , element -> clickEvent . player . sendMessage ( \"You clicked on: ${ element . name } \" ) } ) } Notice that the generic type of the compound is Material . The compound type defines the type of the elements which can be added to the compound. The iconGenerator defines how each compound element should be displayed. You will get the element passed as it and you have to return an ItemStack , which will be used for the icon. Info In our example, it is very easy to create the icon, as we can easily create an ItemStack from a Material . In your scenarios, don't be scared of putting more complex logic inside the iconGenerator .","title":"Create a new compound"},{"location":"gui/compounds/#modify-the-content-of-a-compound","text":"The compound from above will be empty at first, you have to add content to it. This can be done using the compound.addContent function. The content you add has to be of the type you defined earlier (in our case this is Material ). compound . addContent ( Material . values (). toList ()) In order to remove content, call the compound.removeContent function. Let's remove air from our example compound. compound . removeContent ( Material . AIR )","title":"Modify the content of a compound"},{"location":"gui/compounds/#sort-the-compound","text":"You can use the compound.sortContentBy function to define in which order the elements of a compound should be displayed. In our example, we could sort by the name of the material like this: compound . sortContentBy { it . name }","title":"Sort the compound"},{"location":"gui/compounds/#add-scroll-buttons","text":"If the content of the compound won't fit on one page of the GUI, do not create multiple pages, even if this is what you might think of at first. Instead, add scroll buttons to the same page!","title":"Add scroll buttons"},{"location":"gui/compounds/#smooth-scrolling","text":"To implement smooth scrolling, create scroll buttons like this: compoundScroll ( Slots . RowOneSlotNine , ItemStack ( Material . PAPER ), compound , scrollTimes = 6 ) compoundScroll ( Slots . RowSixSlotNine , ItemStack ( Material . PAPER ), compound , scrollTimes = 6 , reverse = true ) Notice that you have to pass the compound as a parameter. Also, be careful to set scrollTimes to the height of your compound (in our example this is 6, because the inventory is 6 slots high, and we use the full height). You can use the reverse parameter and set it to true to create a button that scrolls backwards.","title":"Smooth scrolling"},{"location":"gui/compounds/#instant-hard-scrolling","text":"Instant (or hard) scrolling means that no scrolling animation will be displayed. To implement instant scrolling, leave scrollTimes at its default value (1) and instead modify the scrollLines parameter. Set scrollLines to the amount of lines you want to instantly scroll by pressing the button. If you want to scroll \"page by page\", set scrollLines to the height of the compound. In our example, we could create the following button to scroll \"page by page\" instantly (without any scrolling animation): compoundScroll ( Slots . RowSixSlotNine , ItemStack ( Material . PAPER ), compound , scrollLines = 6 )","title":"Instant (hard) scrolling"},{"location":"migration/1_16_to_1_17/","text":"Updating from KSpigot for 1.16 to KSpigot for 1.17 \u00b6 Dependency management \u00b6 Do not use the Gradle shadow plugin anymore! Spigot now has its own library feature, use that one instead. This applies to KSpigot, but in the best case for your other dependencies as well! For KSpigot this means, that you have to add the following to your plugin.yml : libraries : - \"net.axay:kspigot:VERSION\" Of course, replace VERSION with the KSpigot version you are using. Read the setup guide for more information. Removed features \u00b6 You can no longer await anvil input from a player. This feature was not stable enough to fit in this project. Changed \u00b6 The Listener.register() extension function now is no longer available, instead it has been replaced by SingleListener<T : Event>.register() . Don't worry, this means that this change does not affect you if you are using the listen function provided by KSpigot. KSpigot is now compiled using Java 16 ! Make sure to use Java 16 aswell. Java 16 is now the minimum required version for Minecraft by Mojang.","title":"1.16 to 1.17"},{"location":"migration/1_16_to_1_17/#updating-from-kspigot-for-116-to-kspigot-for-117","text":"","title":"Updating from KSpigot for 1.16 to KSpigot for 1.17"},{"location":"migration/1_16_to_1_17/#dependency-management","text":"Do not use the Gradle shadow plugin anymore! Spigot now has its own library feature, use that one instead. This applies to KSpigot, but in the best case for your other dependencies as well! For KSpigot this means, that you have to add the following to your plugin.yml : libraries : - \"net.axay:kspigot:VERSION\" Of course, replace VERSION with the KSpigot version you are using. Read the setup guide for more information.","title":"Dependency management"},{"location":"migration/1_16_to_1_17/#removed-features","text":"You can no longer await anvil input from a player. This feature was not stable enough to fit in this project.","title":"Removed features"},{"location":"migration/1_16_to_1_17/#changed","text":"The Listener.register() extension function now is no longer available, instead it has been replaced by SingleListener<T : Event>.register() . Don't worry, this means that this change does not affect you if you are using the listen function provided by KSpigot. KSpigot is now compiled using Java 16 ! Make sure to use Java 16 aswell. Java 16 is now the minimum required version for Minecraft by Mojang.","title":"Changed"},{"location":"migration/1_17_to_1_18/","text":"Upgrading to KSpigot for 1.18 (from 1.17) \u00b6 Use it with paperweight (really (like really)) \u00b6 Please use this library together with the paperweight Gradle plugin, as it remaps the obfuscated parts of the KSpigot jar to mojmap, and adds all necessary dependencies with one bundle! settings.gradle.kts pluginManagement { repositories { gradlePluginPortal () maven ( \"https://papermc.io/repo/repository/maven-public/\" ) } } build.gradle.kts plugins { id ( \"io.papermc.paperweight.userdev\" ) version \"VERSION\" } dependencies { paperDevBundle ( \"1.18.1-R0.1-SNAPSHOT\" ) implementation ( \"net.axay:kspigot:1.18.0\" ) } Removed features \u00b6 The wrapper for nbt compounds has been removed, use CompoundTag of net.minecraft instead! Upcoming features \u00b6 Due to Paper now being binary compatible with all other Minecraft modding toolchains, expect to see features from FabrikMC on the paper side! Paper first policy \u00b6 From now on, KSpigot only supports Paper . Use it with \"vanilla\" Spigot at your own risk. It is highly suggested that you use Paper together with this library.","title":"1.17 to 1.18"},{"location":"migration/1_17_to_1_18/#upgrading-to-kspigot-for-118-from-117","text":"","title":"Upgrading to KSpigot for 1.18 (from 1.17)"},{"location":"migration/1_17_to_1_18/#use-it-with-paperweight-really-like-really","text":"Please use this library together with the paperweight Gradle plugin, as it remaps the obfuscated parts of the KSpigot jar to mojmap, and adds all necessary dependencies with one bundle! settings.gradle.kts pluginManagement { repositories { gradlePluginPortal () maven ( \"https://papermc.io/repo/repository/maven-public/\" ) } } build.gradle.kts plugins { id ( \"io.papermc.paperweight.userdev\" ) version \"VERSION\" } dependencies { paperDevBundle ( \"1.18.1-R0.1-SNAPSHOT\" ) implementation ( \"net.axay:kspigot:1.18.0\" ) }","title":"Use it with paperweight (really (like really))"},{"location":"migration/1_17_to_1_18/#removed-features","text":"The wrapper for nbt compounds has been removed, use CompoundTag of net.minecraft instead!","title":"Removed features"},{"location":"migration/1_17_to_1_18/#upcoming-features","text":"Due to Paper now being binary compatible with all other Minecraft modding toolchains, expect to see features from FabrikMC on the paper side!","title":"Upcoming features"},{"location":"migration/1_17_to_1_18/#paper-first-policy","text":"From now on, KSpigot only supports Paper . Use it with \"vanilla\" Spigot at your own risk. It is highly suggested that you use Paper together with this library.","title":"Paper first policy"},{"location":"setup/entrypoint/","text":"The entrypoint in KSpigot is a class which represents the main class of your plugin. Type of the main class Please note that due to a limitation of Spigot, your main class has to be a class , it cannot be an object or anything else. Create the main class \u00b6 Create a new file at src/main/kotlin/your/package/structure/ and call it (for example) Manager . Add the following class to the file: class InternalMainClass : KSpigot () { override fun load () { } override fun startup () { } override fun shutdown () { } } Coming from Paper or Spigot? When using KSpigot do not inherit from JavaPlugin , inherit from KSpigot instead. Also, please note that: onLoad becomes load onEnable becomes startup onDisable becomes shutdown Be careful with the load function The load() function is called earlier than the safe startup() function. During that time not all functionality of Spigot is available to your plugin, therefore you should prefer the startup() function if possible. Make it globally available \u00b6 As noted above you cannot use object for the main class. Fortunately, due to the fact that there should always only exist one instance of your main class, you can provide it globally by building the main class as follows: class InternalMainClass : KSpigot () { companion object { lateinit var INSTANCE : InternalMainClass ; private set } override fun load () { INSTANCE = this } override fun startup () { } override fun shutdown () { } } val Manager by lazy { InternalMainClass . INSTANCE }","title":"Entrypoint to your plugin"},{"location":"setup/entrypoint/#create-the-main-class","text":"Create a new file at src/main/kotlin/your/package/structure/ and call it (for example) Manager . Add the following class to the file: class InternalMainClass : KSpigot () { override fun load () { } override fun startup () { } override fun shutdown () { } } Coming from Paper or Spigot? When using KSpigot do not inherit from JavaPlugin , inherit from KSpigot instead. Also, please note that: onLoad becomes load onEnable becomes startup onDisable becomes shutdown Be careful with the load function The load() function is called earlier than the safe startup() function. During that time not all functionality of Spigot is available to your plugin, therefore you should prefer the startup() function if possible.","title":"Create the main class"},{"location":"setup/entrypoint/#make-it-globally-available","text":"As noted above you cannot use object for the main class. Fortunately, due to the fact that there should always only exist one instance of your main class, you can provide it globally by building the main class as follows: class InternalMainClass : KSpigot () { companion object { lateinit var INSTANCE : InternalMainClass ; private set } override fun load () { INSTANCE = this } override fun startup () { } override fun shutdown () { } } val Manager by lazy { InternalMainClass . INSTANCE }","title":"Make it globally available"},{"location":"setup/gradle/","text":"The following code snippets can be used in your build.gradle.kts file. An example of a final configuration file is also available . Prerequisites \u00b6 Java version \u00b6 Make sure that you have configured the Java version correctly. Add paper (via paperweight) \u00b6 Add the paperweight Gradle plugin. Have a look at the example . Add KSpigot \u00b6 Add the dependency \u00b6 Add the following repository to your repositories scope: repositories { mavenCentral () } Add the KSpigot dependency to your dependencies scope: dependencies { implementation ( \"net.axay:kspigot:VERSION\" ) } Replace VERSION with the version you want to use. Latest version (without the v ): Add KSpigot to your plugins libraries \u00b6 Add KSpigot as a library to the libraries list on your plugin.yml . Make sure that you are always using the same string you where using when defining the dependency in Gradle. libraries : - \"net.axay:kspigot:VERSION\" Build your final plugin \u00b6 Run the Gradle task called build . Using IntelliJ IDEA, this can be done using the Gradle sidebar, where you can find the task under Tasks > build > build . Alternatively, you can also run ./gradlew build in your terminal. The final .jar file of your plugin will then be at the following location: build/libs/yourplugin.jar","title":"Setup using Gradle"},{"location":"setup/gradle/#prerequisites","text":"","title":"Prerequisites"},{"location":"setup/gradle/#java-version","text":"Make sure that you have configured the Java version correctly.","title":"Java version"},{"location":"setup/gradle/#add-paper-via-paperweight","text":"Add the paperweight Gradle plugin. Have a look at the example .","title":"Add paper (via paperweight)"},{"location":"setup/gradle/#add-kspigot","text":"","title":"Add KSpigot"},{"location":"setup/gradle/#add-the-dependency","text":"Add the following repository to your repositories scope: repositories { mavenCentral () } Add the KSpigot dependency to your dependencies scope: dependencies { implementation ( \"net.axay:kspigot:VERSION\" ) } Replace VERSION with the version you want to use. Latest version (without the v ):","title":"Add the dependency"},{"location":"setup/gradle/#add-kspigot-to-your-plugins-libraries","text":"Add KSpigot as a library to the libraries list on your plugin.yml . Make sure that you are always using the same string you where using when defining the dependency in Gradle. libraries : - \"net.axay:kspigot:VERSION\"","title":"Add KSpigot to your plugins libraries"},{"location":"setup/gradle/#build-your-final-plugin","text":"Run the Gradle task called build . Using IntelliJ IDEA, this can be done using the Gradle sidebar, where you can find the task under Tasks > build > build . Alternatively, you can also run ./gradlew build in your terminal. The final .jar file of your plugin will then be at the following location: build/libs/yourplugin.jar","title":"Build your final plugin"},{"location":"setup/gradle_example/","text":"An example for a Gradle build script of a project using KSpigot would be: (please note that the version in the following examples might be outdated) build.gradle.kts import org.jetbrains.kotlin.gradle.tasks.KotlinCompile plugins { kotlin ( \"jvm\" ) version \"1.7.0\" id ( \"io.papermc.paperweight.userdev\" ) version \"1.3.6\" } group = \"your.group\" version = \"1.0-SNAPSHOT\" repositories { mavenCentral () } dependencies { paperDevBundle ( \"1.19-R0.1-SNAPSHOT\" ) implementation ( \"net.axay:kspigot:1.19.0\" ) } tasks { build { dependsOn ( reobfJar ) } compileJava { options . encoding = \"UTF-8\" options . release . set ( 17 ) } compileKotlin { kotlinOptions . jvmTarget = \"17\" } } settings.gradle.kts rootProject . name = \"projectname\" pluginManagement { repositories { gradlePluginPortal () maven ( \"https://papermc.io/repo/repository/maven-public/\" ) } }","title":"Build script example"},{"location":"setup/beginners/beginners/","text":"For absolute beginners \u00b6 There are several things required to get started with KSpigot. Kotlin \u00b6 Kotlin is requirement for using KSpigot, as it is made for use with the Kotlin programming language. You can start learning Kotlin with the official docs or by using the Kotlin Playground . Gradle \u00b6 You should be able to use Gradle as your build system, although you do not have to understand to much of it. Probably it will even work if you just copy and paste the snippets this guide provides. Paper \u00b6 Paper is just an API, meaning that if you are able to use Kotlin, you will be able to use an API like Paper and KSpigot. Nevertheless, it is good to know at least something about the Paper API.","title":"Requirements"},{"location":"setup/beginners/beginners/#for-absolute-beginners","text":"There are several things required to get started with KSpigot.","title":"For absolute beginners"},{"location":"setup/beginners/beginners/#kotlin","text":"Kotlin is requirement for using KSpigot, as it is made for use with the Kotlin programming language. You can start learning Kotlin with the official docs or by using the Kotlin Playground .","title":"Kotlin"},{"location":"setup/beginners/beginners/#gradle","text":"You should be able to use Gradle as your build system, although you do not have to understand to much of it. Probably it will even work if you just copy and paste the snippets this guide provides.","title":"Gradle"},{"location":"setup/beginners/beginners/#paper","text":"Paper is just an API, meaning that if you are able to use Kotlin, you will be able to use an API like Paper and KSpigot. Nevertheless, it is good to know at least something about the Paper API.","title":"Paper"},{"location":"setup/beginners/java_version/","text":"Configuring the Java version is nothing specific to KSpigot, it should always be done. It is listed in this guide anyways, because a lot of beginners forget to do this - and then get confused about not being able to use inline functions. Java 17 is the minimum required Java version by Minecraft, therefore KSpigot requires it as well. You can configure the Java version using Gradle: // set the Java version you are using, Java 17 is the minimum required version for Minecraft tasks { compileJava { options . release . set ( 17 ) } compileKotlin { kotlinOptions . jvmTarget = \"17\" } }","title":"Configure Java version"},{"location":"setup/beginners/project/","text":"In this guide we will assume that you are using or want to use Gradle. Install Java \u00b6 You will need to have the JDK (Java Development Kit) installed. If you do not already have a JDK installed, you have several options: Windows or using Scoop you can do this Arch pacman -S jdk-openjdk (refer to the archwiki for other versions) Debian apt install default-jdk (refer to the Debian Wiki for other versions) Please make sure that you know which version of Java you have just installed. If you just have one installation of Java, run java -version to get the current Java version on your system. Create a project \u00b6 In IntelliJ IDEA, click on File > New > Project and choose Gradle on the sidebar in the popup window. Now choose the JDK which you have just installed. If you want to write your gradle build script in Kotlin, make sure to tick the Kotlin DSL build script checkbox. (recommended) Now select Java and Kotlin/JVM as your frameworks. After that, you can create your project. You may now continue with the Setup using Gradle guide. Add the Spigot plugin.yml \u00b6 Create a new file called plugin.yml in the resources directory of your project. Read the official documentation for the Spigot plugin.yml file.","title":"Starting a new project"},{"location":"setup/beginners/project/#install-java","text":"You will need to have the JDK (Java Development Kit) installed. If you do not already have a JDK installed, you have several options: Windows or using Scoop you can do this Arch pacman -S jdk-openjdk (refer to the archwiki for other versions) Debian apt install default-jdk (refer to the Debian Wiki for other versions) Please make sure that you know which version of Java you have just installed. If you just have one installation of Java, run java -version to get the current Java version on your system.","title":"Install Java"},{"location":"setup/beginners/project/#create-a-project","text":"In IntelliJ IDEA, click on File > New > Project and choose Gradle on the sidebar in the popup window. Now choose the JDK which you have just installed. If you want to write your gradle build script in Kotlin, make sure to tick the Kotlin DSL build script checkbox. (recommended) Now select Java and Kotlin/JVM as your frameworks. After that, you can create your project. You may now continue with the Setup using Gradle guide.","title":"Create a project"},{"location":"setup/beginners/project/#add-the-spigot-pluginyml","text":"Create a new file called plugin.yml in the resources directory of your project. Read the official documentation for the Spigot plugin.yml file.","title":"Add the Spigot plugin.yml"}]}